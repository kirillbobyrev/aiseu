//! Mappings of occupied squares to the attacked squares for each piece. The
//! mappings are pre-calculated where possible to provide the efficient way of
//! generating moves and attack maps.

use crate::chess::bitboard::Bitboard;
use crate::chess::core::BOARD_SIZE;

// Pre-calculated attacks of a knight from each square.
pub(in crate::chess) const KNIGHT_ATTACKS: [Bitboard; BOARD_SIZE as usize] = [
    Bitboard::from_bits(0x0000_0000_0002_0400),
    Bitboard::from_bits(0x0000_0000_0005_0800),
    Bitboard::from_bits(0x0000_0000_000A_1100),
    Bitboard::from_bits(0x0000_0000_0014_2200),
    Bitboard::from_bits(0x0000_0000_0028_4400),
    Bitboard::from_bits(0x0000_0000_0050_8800),
    Bitboard::from_bits(0x0000_0000_00A0_1000),
    Bitboard::from_bits(0x0000_0000_0040_2000),
    Bitboard::from_bits(0x0000_0000_0204_0004),
    Bitboard::from_bits(0x0000_0000_0508_0008),
    Bitboard::from_bits(0x0000_0000_0A11_0011),
    Bitboard::from_bits(0x0000_0000_1422_0022),
    Bitboard::from_bits(0x0000_0000_2844_0044),
    Bitboard::from_bits(0x0000_0000_5088_0088),
    Bitboard::from_bits(0x0000_0000_A010_0010),
    Bitboard::from_bits(0x0000_0000_4020_0020),
    Bitboard::from_bits(0x0000_0002_0400_0402),
    Bitboard::from_bits(0x0000_0005_0800_0805),
    Bitboard::from_bits(0x0000_000A_1100_110A),
    Bitboard::from_bits(0x0000_0014_2200_2214),
    Bitboard::from_bits(0x0000_0028_4400_4428),
    Bitboard::from_bits(0x0000_0050_8800_8850),
    Bitboard::from_bits(0x0000_00A0_1000_10A0),
    Bitboard::from_bits(0x0000_0040_2000_2040),
    Bitboard::from_bits(0x0000_0204_0004_0200),
    Bitboard::from_bits(0x0000_0508_0008_0500),
    Bitboard::from_bits(0x0000_0A11_0011_0A00),
    Bitboard::from_bits(0x0000_1422_0022_1400),
    Bitboard::from_bits(0x0000_2844_0044_2800),
    Bitboard::from_bits(0x0000_5088_0088_5000),
    Bitboard::from_bits(0x0000_A010_0010_A000),
    Bitboard::from_bits(0x0000_4020_0020_4000),
    Bitboard::from_bits(0x0002_0400_0402_0000),
    Bitboard::from_bits(0x0005_0800_0805_0000),
    Bitboard::from_bits(0x000A_1100_110A_0000),
    Bitboard::from_bits(0x0014_2200_2214_0000),
    Bitboard::from_bits(0x0028_4400_4428_0000),
    Bitboard::from_bits(0x0050_8800_8850_0000),
    Bitboard::from_bits(0x00A0_1000_10A0_0000),
    Bitboard::from_bits(0x0040_2000_2040_0000),
    Bitboard::from_bits(0x0204_0004_0200_0000),
    Bitboard::from_bits(0x0508_0008_0500_0000),
    Bitboard::from_bits(0x0A11_0011_0A00_0000),
    Bitboard::from_bits(0x1422_0022_1400_0000),
    Bitboard::from_bits(0x2844_0044_2800_0000),
    Bitboard::from_bits(0x5088_0088_5000_0000),
    Bitboard::from_bits(0xA010_0010_A000_0000),
    Bitboard::from_bits(0x4020_0020_4000_0000),
    Bitboard::from_bits(0x0400_0402_0000_0000),
    Bitboard::from_bits(0x0800_0805_0000_0000),
    Bitboard::from_bits(0x1100_110A_0000_0000),
    Bitboard::from_bits(0x2200_2214_0000_0000),
    Bitboard::from_bits(0x4400_4428_0000_0000),
    Bitboard::from_bits(0x8800_8850_0000_0000),
    Bitboard::from_bits(0x1000_10A0_0000_0000),
    Bitboard::from_bits(0x2000_2040_0000_0000),
    Bitboard::from_bits(0x0004_0200_0000_0000),
    Bitboard::from_bits(0x0008_0500_0000_0000),
    Bitboard::from_bits(0x0011_0A00_0000_0000),
    Bitboard::from_bits(0x0022_1400_0000_0000),
    Bitboard::from_bits(0x0044_2800_0000_0000),
    Bitboard::from_bits(0x0088_5000_0000_0000),
    Bitboard::from_bits(0x0010_A000_0000_0000),
    Bitboard::from_bits(0x0020_4000_0000_0000),
];
