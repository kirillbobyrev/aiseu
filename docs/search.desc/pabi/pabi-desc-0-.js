searchState.loadedDescShard("pabi", 0, "Modern and high-quality chess engine. For more …\nFeatures the engine is built with (e.g. build type and …\nshadow-rs mod\nImplementation of chess environment, its rules and …\nThe engine puts all pieces together and manages resources …\nReturns the full engine version that can be used to …\nInterface for Reinforcement Learning environment to …\nThis module implements “static” evaluation, i.e. …\nImplements Monte Carlo Tree Search (MCTS) algorithm.\nPrints information the build type, features and whether …\nPrints information about the engine version, author and …\nThe name of the Git branch that this project was built …\nOperating system and architecture on which the project was …\nThe debug configuration with which the project was built. …\nThe target for this build. This is possibly distinct from …\nThe architecture of the target for this build. This is the …\nThe project build time, formatted in modified ISO 8601 …\nThe project build time, formatted according to RFC 2822 …\nThe project build time, formatted according to RFC 3339 …\nThe directory of the Cargo.toml manifest file of the …\nThe dependency tree of the project, as output by <code>cargo tree</code>…\nThe cargo version which which the project was built, as …\nA long version string describing the project. The version …\nThe author of the Git commit that this project was built …\nThe time of the Git commit that this project was built …\nThe name of the Git branch that this project was built …\nThe name of the Git branch that this project was built …\nThe e-mail address of the author of the Git commit that …\nThe full commit hash of the Git commit that this project …\nWhether the Git working tree was clean at the time of …\nThe Git working tree status as a list of files with their …\nThe name of the last Git tag on the branch that this …\nThe project’s description, as determined by the …\nThe project’s full version string, as determined by the …\nThe project’s semver major version, as determined by the …\nThe project’s semver minor version, as determined by the …\nThe project’s semver patch version, as determined by the …\nThe project’s semver pre-release version, as determined …\nThe project name, as determined by the Cargo.toml manifest.\nThe Rustup toolchain with which the project was built. …\nRust version with which the project was built. The version …\nThe short hash of the Git commit that this project was …\nThe name of the Git tag that this project was built from. …\nA long version string describing the project. The version …\nPrints all built-in <code>shadow-rs</code> build constants to standard …\nMappings of occupied squares to the attacked squares for …\n<code>Bitboard</code>-based representation for …\nChess primitives commonly used within <code>crate::chess</code>.\nProvides fully-specified Chess Position implementation: …\nZobrist hashing-related utilities`.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a set of squares and provides common operations …\nIterates over set squares in a given Bitboard from least …\nPiece-centric representation of all material owned by one …\nReturns raw bits.\nClears given square from the set.\nReturns true if this bitboard contains given square.\nConstructs a bitboard representing empty set of squares.\nAdds given square to the set.\nFlips the bitboard vertically.\nThe board is printed from A1 to H8, starting from bottom …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs Bitboard from pre-calculated bits.\nConstructs a bitboard representing the universal set, it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn efficient way to iterate over the set squares.\nReturns complement set of Self, i.e. flipping the set …\nShifts the bits to the left and ignores overflow.\nShifts the bits to the right and ignores overflow.\nRelative component, i.e. Result = LHS \\ RHS.\nTrack the ability to castle each side (kingside is often …\nA standard game of chess is played between two players: …\nDirections on the board from a perspective of White player.\nAlso known as South.\nRepresents a column (vertical row) of the chessboard. In …\nSize of <code>MoveList</code> and an upper bound of moves in a chess …\nRepresents any kind of a legal chess move. A move is the …\nMoves are stored on stack to avoid memory allocations and …\nRepresents a specific piece owned by a player.\nStandard chess pieces types for one player.\nA pawn can be promoted to a queen, rook, bishop or a …\nRepresents a horizontal row of the chessboard. In chess …\nBoard squares: from left to right, from bottom to the top (…\nIterates over squares in the order from A1 to H8, from …\nAlso known as North.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns file (column) on which the square is located.\nConverts the move from the perspective of one player to …\n“Flips” the square vertically, i.e. returns the square …\nSerializes a move in UCI format (used by [<code>pabi::uci</code>]).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nConverts the move from UCI format to the internal …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nCreates an iterator over all squares, starting from A1 (0) …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns a pre-calculated bitboard mask with 1s set for …\nConnects file (column) and rank (row) to form a full …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns rank (row) on which the square is located.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCreates a square given its position on the board.\nCreates a square given its position on the board.\nParses <code>CastleRights</code> for both players from the FEN format. …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPiece-centric implementation of the chess position, which …\nComputes standard Zobrist hash of the position using …\nDumps the board in a human readable format (‘.’ for …\nReturns position representation in Forsyth-Edwards …\nReturns the argument unchanged.\nParses board from Forsyth-Edwards Notation and checks its …\nCalculates a list of legal moves (i.e. the moves that do …\nHalfmove Clock keeps track of the number of halfmoves …\nReturns true if 50-move rule draw is in effect.\nReturns Zobrist hash of the position.\nCalls <code>U::from(self)</code>.\nChecks whether a position is pseudo-legal. This is a …\nCastle or regular king move.\nTransitions to the next position by applying the move.\nPerft (<strong>per</strong>formance <strong>t</strong>esting) is a technique for checking …\nCreates the starting position of the standard chess.\nChecks if the position is “legal”, i.e. if it can be …\nZobrist keys are 64-bit unsigned integers that are …\nRemoves all entries from the repetition history.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an empty repetition table.\nReturns true if the position has occurred 3 times.\nThe Engine connects everything together and handles …\nReturns the argument unchanged.\nResponds to the <code>uci</code> handshake command by identifying the …\nUCI commands will be read from this stream.\nCalls <code>U::from(self)</code>.\nCreates a new instance of the engine with the starting …\nRuns search on a small set of positions to provide an …\nResponses to UCI commands will be written to this stream.\nNext search will start from this position.\nChanges the position of the board to the one specified in …\nStops the search immediately.\nSyncs with the UCI server by responding with <code>readyok</code>.\nContinuously reads the input stream and executes sent UCI …\nThis is an extension to the UCI protocol useful for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStandard gym-like Reinforcement Learning environment …\nResult of the game from the perspective of the player to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtracts features from the position.\nPolicy + Value Neural Network model.\nSearch depth in plies.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")